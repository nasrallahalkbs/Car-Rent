`); printWindow.document.close(); }); // زر إعادة التعيين resetButton.addEventListener('click', resetSettings); // ======================== // الوظائف المساعدة // ======================== // تحديث حجم الورق function updatePaperSize() { // إزالة جميع فئات الورق السابقة previewPaper.classList.remove('paper-a4', 'paper-a5', 'paper-letter', 'paper-legal'); // إضافة فئة الورق المحدد previewPaper.classList.add('paper-' + paperSizeSelect.value); } // تحديث الهوامش function updateMargins() { previewContent.style.paddingTop = marginTop.value + 'mm'; previewContent.style.paddingBottom = marginBottom.value + 'mm'; previewContent.style.paddingRight = marginRight.value + 'mm'; previewContent.style.paddingLeft = marginLeft.value + 'mm'; } // تحديث العنوان function updateTitle() { previewTitle.textContent = reportTitle.value; previewTitle.style.fontSize = titleFontSize.value; } // تحديث عرض الجدول function updateTableWidth() { previewTable.style.width = tableWidth.value + '%'; } // تحديث أحجام الخطوط function updateFontSizes() { previewTable.style.fontSize = tableFontSize.value; } // تحديث لون الجدول function updateTableColor() { // إزالة كل الألوان القديمة previewTable.classList.remove('table-blue', 'table-green', 'table-orange', 'table-red', 'table-purple'); // تطبيق اللون الجديد if (tableColor.value !== 'default') { previewTable.classList.add('table-' + tableColor.value); // تطبيق أنماط CSS حسب اللون المختار const headerCells = previewTable.querySelectorAll('th'); const dataCells = previewTable.querySelectorAll('td'); // إعادة تعيين الأنماط headerCells.forEach(cell => { cell.style.backgroundColor = ''; cell.style.color = ''; cell.style.borderColor = ''; }); dataCells.forEach(cell => { cell.style.backgroundColor = ''; cell.style.color = ''; cell.style.borderColor = ''; }); // تطبيق الأنماط الجديدة if (tableColor.value === 'blue') { headerCells.forEach(cell => { cell.style.backgroundColor = '#2c3e50'; cell.style.color = 'white'; cell.style.borderColor = '#34495e'; }); previewTable.querySelectorAll('tr:nth-child(even) td').forEach(cell => { cell.style.backgroundColor = '#ecf0f1'; }); } else if (tableColor.value === 'green') { headerCells.forEach(cell => { cell.style.backgroundColor = '#27ae60'; cell.style.color = 'white'; cell.style.borderColor = '#2ecc71'; }); previewTable.querySelectorAll('tr:nth-child(even) td').forEach(cell => { cell.style.backgroundColor = '#e8f5e9'; }); } else if (tableColor.value === 'orange') { headerCells.forEach(cell => { cell.style.backgroundColor = '#e67e22'; cell.style.color = 'white'; cell.style.borderColor = '#d35400'; }); previewTable.querySelectorAll('tr:nth-child(even) td').forEach(cell => { cell.style.backgroundColor = '#fff3e0'; }); } else if (tableColor.value === 'red') { headerCells.forEach(cell => { cell.style.backgroundColor = '#c0392b'; cell.style.color = 'white'; cell.style.borderColor = '#e74c3c'; }); previewTable.querySelectorAll('tr:nth-child(even) td').forEach(cell => { cell.style.backgroundColor = '#ffebee'; }); } else if (tableColor.value === 'purple') { headerCells.forEach(cell => { cell.style.backgroundColor = '#8e44ad'; cell.style.color = 'white'; cell.style.borderColor = '#9b59b6'; }); previewTable.querySelectorAll('tr:nth-child(even) td').forEach(cell => { cell.style.backgroundColor = '#f3e5f5'; }); } } else { // إعادة تعيين لألوان الافتراضية const headerCells = previewTable.querySelectorAll('th'); const dataCells = previewTable.querySelectorAll('td'); headerCells.forEach(cell => { cell.style.backgroundColor = '#f2f2f2'; cell.style.color = 'black'; cell.style.borderColor = '#ddd'; }); dataCells.forEach(cell => { cell.style.backgroundColor = ''; cell.style.color = 'black'; cell.style.borderColor = '#ddd'; }); previewTable.querySelectorAll('tr:nth-child(even) td').forEach(cell => { cell.style.backgroundColor = '#f9f9f9'; }); } } // تخزين نسخة من بنية الجدول الأفقي الأصلية let originalTableHTML = ''; // تحديث اتجاه الجدول (أفقي / عمودي) function updateTableOrientation() { if (orientationVertical.checked) { // تحويل الجدول إلى الاتجاه العمودي (تبديل الصفوف والأعمدة) transposeTable(); } else { // إعادة الجدول إلى الاتجاه الأفقي (الافتراضي) restoreHorizontalTable(); } } // تحويل الجدول من أفقي إلى عمودي (تبديل الصفوف والأعمدة) function transposeTable() { // حفظ نسخة من الجدول الأصلي إذا لم يتم ذلك بعد if (originalTableHTML === '') { originalTableHTML = previewTable.innerHTML; } // استخراج البيانات من الجدول الحالي const rows = Array.from(previewTable.querySelectorAll('tr')); const columnCount = rows[0].querySelectorAll('th, td').length; const rowCount = rows.length; // مصفوفة لتخزين البيانات const data = []; // استخراج البيانات من الجدول rows.forEach((row, rowIndex) => { const cells = Array.from(row.querySelectorAll('th, td')); cells.forEach((cell, colIndex) => { if (!data[colIndex]) { data[colIndex] = []; } data[colIndex][rowIndex] = { content: cell.innerHTML, isHeader: cell.tagName.toLowerCase() === 'th' }; }); }); // إنشاء الجدول العمودي let newTable = ''; // إضافة صف الرأس (العناوين تصبح في العمود الأول) data.forEach((row, rowIndex) => { if (rowIndex === 0) { newTable += `${row[0].content}`; } else { newTable += `${row[0].content}`; } }); newTable += ''; // إضافة باقي البيانات for (let colIndex = 1; colIndex < rowCount; colIndex++) { newTable += ''; for (let rowIndex = 0; rowIndex < columnCount; rowIndex++) { if (data[rowIndex] && data[rowIndex][colIndex]) { newTable += `${data[rowIndex][colIndex].content}`; } else { newTable += ''; } } newTable += ''; } newTable += ''; // تطبيق الجدول العمودي previewTable.innerHTML = newTable; // إعادة تطبيق لون الجدول بعد التحويل updateTableColor(); } // إعادة الجدول إلى الاتجاه الأفقي function restoreHorizontalTable() { if (originalTableHTML !== '') { previewTable.innerHTML = originalTableHTML; // إعادة تطبيق لون الجدول بعد العودة للوضع الأفقي updateTableColor(); } } // إضافة صفوف إضافية للجدول function addExtraRows() { const currentRows = previewTable.tBodies[0].querySelectorAll('tr:not(.extra-row)').length; const extraRowsNeeded = parseInt(tableRows.value); // إزالة جميع الصفوف الإضافية الحالية previewTable.tBodies[0].querySelectorAll('tr.extra-row').forEach(row => row.remove()); // إضافة الصفوف الإضافية الجديدة for (let i = 0; i < extraRowsNeeded; i++) { const newRow = document.createElement('tr'); newRow.className = 'extra-row'; // إضافة خلايا فارغة بعدد أعمدة الجدول const columnCount = previewTable.tHead.rows[0].cells.length; for (let j = 0; j < columnCount; j++) { const cell = document.createElement('td'); cell.innerHTML = ' '; newRow.appendChild(cell); } previewTable.tBodies[0].appendChild(newRow); } } // تحديث النص قبل الجدول function updatePreTableText() { if (addTextBeforeTable.checked) { previewPreText.textContent = preTableText.value; previewPreText.style.display = 'block'; } else { previewPreText.style.display = 'none'; } } // إعادة تعيين الإعدادات إلى القيم الافتراضية function resetSettings() { paperSizeSelect.value = 'a4'; marginTop.value = 20; marginBottom.value = 20; marginRight.value = 20; marginLeft.value = 20; printerSearch.checked = false; printerControl.style.display = 'none'; reportTitle.value = 'تقرير الحجوزات'; titleFontSize.value = '18pt'; tableRows.value = 5; tableWidth.value = 100; tableFontSize.value = '12pt'; // إعادة تعيين إعدادات لون الجدول واتجاهه tableColor.value = 'default'; orientationHorizontal.checked = true; orientationVertical.checked = false; addTextBeforeTable.checked = false; preTableTextControl.style.display = 'none'; preTableText.value = ''; // إعادة الجدول إلى الاتجاه الأفقي إذا كان عمودياً if (originalTableHTML !== '') { restoreHorizontalTable(); } // تطبيق الإعدادات الافتراضية updatePaperSize(); updateMargins(); updateTitle(); updateTableColor(); updateTableWidth(); updateFontSizes(); 